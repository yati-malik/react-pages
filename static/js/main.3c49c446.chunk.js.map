{"version":3,"sources":["logo.svg","Store.js","HomePage.js","InfoPage.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["instance","add","item","data","push","get","pop","this","window","app_add","app_get","Object","freeze","HomePage","handleWindowMsg","event","newMessage","log","setLog","useEffect","addEventListener","removeEventListener","useState","className","to","onClick","ReactNativeWebView","postMessage","headerStr","JSON","stringify","message","type","payload","title","subtitle","leftIcon","isHeaderVisible","isFooterVisible","console","userAgent","navigator","InfoPage","App","exact","path","component","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.3c49c446.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","class UserStore {\n    constructor() {\n        this.data = [];\n        window.app_add = this.add;\n        window.app_get = this.get;\n    }\n\n    add = (item) => {\n\n        this.data.push(item);\n    }\n\n    get = () => {\n\n        return this.data.pop();\n    }\n}\n\nconst instance = new UserStore();\nObject.freeze(instance);\n\nexport default instance;","import React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\nimport storeInstance from \"./Store\";\n\nconst HomePage = () => {\n\n    const handleDocumentMsg = (event) => {\n        let newMessage = log + event.data;\n        setLog(newMessage);\n    }\n\n    const handleWindowMsg = (event) => {\n        let newMessage = log + event.data;\n        setLog(newMessage);\n    }\n\n    const getHeaders = (event) => {\n        const headerAction = {\n            \"type\": \"GET_HEADERS\",\n            \"payload\": {\n                \"url\": \"https://kongqa.airtel.com/guardian/api/v1/digitalStore/feed3?msisdn=9711977967&sourceName=SHOP_DISCOVERY\",\n                \"method\": \"GET\",\n                \"body\": \"\"\n            }\n        }\n        const headerStr = JSON.stringify(headerAction);\n        window.ReactNativeWebView.postMessage(headerStr);\n    }\n\n    useEffect(() => {\n        //document.addEventListener(\"message\", handleDocumentMsg);\n\n        window.addEventListener(\"message\", handleWindowMsg);\n\n        return function () {\n            // document.removeEventListener(\"message\", handleDocumentMsg);\n            window.removeEventListener(\"message\", handleWindowMsg);\n        }\n    }, []);\n\n    const [log, setLog] = useState(\"\");\n\n    const handleHideClick = () => {\n        window.ReactNativeWebView.postMessage(\"Hi From Hide Changed Again\");\n    }\n\n    const initializeHeader = () => {\n        const payload = {\n            type: \"UPDATE_HEADER_FOOTER\",\n            payload: {\n                title: \"Store Purchases\",\n                subtitle: \"subtitle text\",\n                leftIcon: \"BACK\",\n                isHeaderVisible: true,\n                isFooterVisible: true\n            }\n        }\n        const message = JSON.stringify(payload);\n        debugger;\n        console.log(message);\n        window.ReactNativeWebView.postMessage(message);\n    }\n\n    const handleShowClick = () => {\n        window.ReactNativeWebView.postMessage(\"Hi From Show\");\n    }\n\n    const makePayment = () => {\n        const payload = {\n            \"type\": \"SHOP_PAYMENT\",\n            \"payload\": {\n                \"productCategory\": \"\",\n                \"payment_lob\": \"\",\n                \"redirectionUrl\": \"\",\n                \"cartItems\": [\n                    {\n                        \"provisionSi\": \"string\",\n                        \"validityText\": \"string\",\n                        \"originalPrice\": 10,\n                        \"partnerName\": \"string\",\n                        \"bannerUrl\": \"string\",\n                        \"actionCta\": \"string\",\n                        \"productName\": \"string\",\n                        \"logoUrl\": \"string\",\n                        \"isAddedToCart\": false,\n                        \"discountedPrice\": 8,\n                        \"genre\": \"string\",\n                        \"details\": \"\",\n                        \"validity\": {\n                            \"value\": \"\",\n                            \"unit\": \"\"\n                        },\n                        \"serviceId\": \"string\",\n                        \"lob\": \"string\",\n                        \"thumbnailUrl\": \"string\"\n                    }\n                ],\n                \"userInfo\": {\n                    \"loginId\": \"\"\n                },\n                \"orderAmount\": 10,\n                \"billingSi\": \"string\",\n                \"postingInfo\": [\n                    {\n                        \"paymentAmount\": 20,\n                        \"provisionSi\": \"string\",\n                        \"productId\": \"string\"\n                    }\n                ]\n            }\n        }\n        const message = JSON.stringify(payload);\n        window.ReactNativeWebView.postMessage(message);\n    }\n\n    const getSessionId = () => {\n        const payload = {\n            \"type\": \"GET_SESSION_ID\",\n            \"payload\": null\n        }\n        const message = JSON.stringify(payload);\n        window.ReactNativeWebView.postMessage(message);\n    }\n\n    const getOSEnv = () => {\n        let userAgent = window.navigator.userAgent;\n        setLog(userAgent);\n    }\n\n\n    return (\n        <div className=\"app\">\n            <button className=\"pd10\">New Message</button>\n            <Link to=\"/info\" >Go to Info Page</Link>\n            <br></br>\n            <button className=\"pd10\" onClick={handleShowClick}>Show</button>\n            <button className=\"pd10\" onClick={handleHideClick}>Hide</button>\n            <button className=\"pd10\" onClick={getHeaders}>Get Headers</button>\n            <button className=\"pd10\" onClick={initializeHeader}>Initialize Header</button>\n            <button className=\"pd10\" onClick={makePayment}>Make Payment</button>\n            <button className=\"pd10\" onClick={getSessionId}>Get Session Id</button>\n            <br />\n            <button className=\"pd10\" onClick={getOSEnv}>Get OS environment</button>\n            <span>{log}</span>\n        </div>\n    );\n}\n\nexport default HomePage;","import React from 'react';\n\nconst InfoPage = () => {\n    return(\n        <div>\n            <h1>Hi You are on the next page</h1>\n        </div>\n    )\n}\n\nexport default InfoPage;","import React from 'react';\nimport logo from './logo.svg';\nimport HomePage from \"./HomePage\";\nimport InfoPage from \"./InfoPage\";\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/info\" component={InfoPage}></Route>\n        <Route path=\"/\" component={HomePage}></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport storeInstance from \"./Store\";\n\n// window.app_add = storeInstance.add.bind(storeInstance);\n// window.app_get = storeInstance.get.bind(storeInstance);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}