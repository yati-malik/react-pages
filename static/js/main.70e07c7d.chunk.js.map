{"version":3,"sources":["logo.svg","HomePage.js","InfoPage.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["HomePage","handleDocumentMsg","event","window","ReactNativeWebView","postMessage","JSON","stringify","data","newMessage","log","setLog","handleWindowMsg","useEffect","document","addEventListener","removeEventListener","useState","className","to","onClick","InfoPage","App","exact","path","component","Boolean","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6MAAe,I,cCoDAA,EAjDE,WAEb,IAAMC,EAAoB,SAACC,GACvBC,OAAOC,mBAAmBC,YAAYC,KAAKC,UAAUL,EAAMM,OAC3D,IAAIC,EAAaC,EAAMR,EAAMM,KAC7BG,EAAOF,IAGLG,EAAkB,SAACV,GACrBC,OAAOC,mBAAmBC,YAAYC,KAAKC,UAAUL,EAAMM,OAC3D,IAAIC,EAAaC,EAAMR,EAAMM,KAC7BG,EAAOF,IAGXI,qBAAU,WAKN,OAJAC,SAASC,iBAAiB,UAAWd,GAErCE,OAAOY,iBAAiB,UAAWH,GAE5B,WACHE,SAASE,oBAAoB,UAAUf,GACvCE,OAAOa,oBAAoB,UAAUJ,MAE1C,IAvBgB,MAyBGK,mBAAS,IAzBZ,mBAyBZP,EAzBY,KAyBPC,EAzBO,KAoCnB,OACI,sBAAKO,UAAU,MAAf,UACI,iDACA,uBACA,cAAC,IAAD,CAAMC,GAAG,QAAT,uBACA,uBACA,wBAAQD,UAAU,OAAOE,QAXT,WACpBjB,OAAOC,mBAAmBC,YAAY,iBAUlC,kBACA,wBAAQa,UAAU,OAAOE,QAhBT,WACpBjB,OAAOC,mBAAmBC,YAAY,+BAelC,kBACA,+BAAOK,QCrCJW,EARE,WACb,OACI,8BACI,gE,eCcGC,MAZf,WAEE,OACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,QAAQC,UAAWJ,IACrC,cAAC,IAAD,CAAOG,KAAK,IAAIC,UAAWzB,UCDf0B,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBZ,MAAK,SAACa,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,YE/G5BrB,M","file":"static/js/main.70e07c7d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { useEffect, useState } from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst HomePage = () => {\n\n    const handleDocumentMsg = (event) => {\n        window.ReactNativeWebView.postMessage(JSON.stringify(event.data));\n        let newMessage = log + event.data;\n        setLog(newMessage);\n    }\n\n    const handleWindowMsg = (event) => {\n        window.ReactNativeWebView.postMessage(JSON.stringify(event.data));\n        let newMessage = log + event.data;\n        setLog(newMessage);\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"message\", handleDocumentMsg);\n\n        window.addEventListener(\"message\", handleWindowMsg);\n\n        return function () {\n            document.removeEventListener(\"message\",handleDocumentMsg);\n            window.removeEventListener(\"message\",handleWindowMsg);\n        }\n    }, []);\n\n    const [log, setLog] = useState(\"\");\n\n    const handleHideClick = () => {\n        window.ReactNativeWebView.postMessage(\"Hi From Hide Changed Again\");\n    }\n\n    const handleShowClick = () => {\n        window.ReactNativeWebView.postMessage(\"Hi From Show\");\n    }\n\n\n    return (\n        <div className=\"app\">\n            <button>New Message</button>\n            <br></br>\n            <Link to=\"/info\">Next page</Link>\n            <br></br>\n            <button className=\"pd10\" onClick={handleShowClick}>Show</button>\n            <button className=\"pd10\" onClick={handleHideClick}>Hide</button>\n            <span>{log}</span>\n        </div>\n    );\n}\n\nexport default HomePage;","import React from 'react';\n\nconst InfoPage = () => {\n    return(\n        <div>\n            <h1>Hi You are on the next page</h1>\n        </div>\n    )\n}\n\nexport default InfoPage;","import React from 'react';\nimport logo from './logo.svg';\nimport HomePage from \"./HomePage\";\nimport InfoPage from \"./InfoPage\";\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/info\" component={InfoPage}></Route>\n        <Route path=\"/\" component={HomePage}></Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}